generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum IdRequestStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum IdRequestType {
  EMPLOYEE
  DEPENDANT
  SPOUSE
  PRIVATEDRIVER
  EMBASSYSTAFF
  PARTNER
  SERVICEPROVIDER
  LIBRARYUSER
  GYMUSER
  RETIREE
}

enum IdRequestReason {
  LOST
  DAMAGED
  EXPIRED
  NEW
}

enum CarPassRequestStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum CarPassRequestType {
  EMPLOYEE
  SERVICEPROVIDER
}

enum CarPassRequestReason {
  LOST
  DAMAGED
  EXPIRED
  NEW
}

enum CounterType {
  ACCESSREQUEST
  IDREQUEST
  INCIDENT
  CARPASSREQUEST
}

enum AuditLogAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  REGISTER
  RESET_PASSWORD
  CHANGE_PASSWORD
  VERIFY_EMAIL
}

enum OfficerType {
  ID
  INCIDENT
  CARPASS
  ACCESS
  PARKING
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  username    String       @unique
  name        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  password    Password?
  roles       Role[]
  connections Connection[]
  auditLogs   AuditLog[]
}

model AuditLog {
  id        String         @id @default(cuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  action    AuditLogAction
  entity    String
  details   Json?
  createdAt DateTime       @default(now())

  @@index([userId])
  @@index([entity])
}

model Permission {
  id          String   @id @default(cuid())
  action      String // create, read, update, delete
  entity      String // user, organ, department
  access      String // own, any
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[]
  users       User[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Country {
  id            String     @id @default(cuid())
  name          String
  code          String
  isMemberState Boolean
  isDeleted     Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  organs        Organ[]
  employees     Employee[]
}

model Organ {
  id          String       @id @default(cuid())
  name        String
  code        String
  address     String
  countryId   String
  country     Country      @relation(fields: [countryId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
  locations   Location[]
  employees   Employee[]
}

model Department {
  id        String     @id @default(cuid())
  name      String
  code      String
  organId   String
  organ     Organ      @relation(fields: [organId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employees Employee[]
}

model Location {
  id        String     @id @default(cuid())
  name      String
  code      String
  organId   String
  organ     Organ      @relation(fields: [organId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  floors    Floor[]
  employees Employee[]
}

model Floor {
  id         String     @id @default(cuid())
  name       String
  code       String
  locationId String
  location   Location   @relation(fields: [locationId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  employees  Employee[]
}

model Relationship {
  id         String      @id @default(cuid())
  name       String
  code       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  dependants Dependant[]
}

model IncidentType {
  id        String     @id @default(cuid())
  name      String
  code      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  incidents Incident[]
}

model Employee {
  id                     String     @id @default(cuid())
  firstName              String
  familyName             String
  middleName             String
  email                  String
  countryId              String
  country                Country    @relation(fields: [countryId], references: [id])
  nationalPassportNumber String
  auPassportNumber       String
  auIdNumber             String
  dateIssued             DateTime   @default(now())
  validUntil             DateTime   @default(now())
  dateOfBirth            DateTime   @default(now())
  organId                String
  organ                  Organ      @relation(fields: [organId], references: [id])
  departmentId           String
  department             Department @relation(fields: [departmentId], references: [id])
  locationId             String
  location               Location   @relation(fields: [locationId], references: [id])
  floorId                String
  floor                  Floor      @relation(fields: [floorId], references: [id])
  officeNumber           String
  specialConditions      String?
  medicallyTrained       Boolean?
  zone                   String?
  team                   String?

  city                  String?
  subcity               String?
  woreda                String?
  street                String?
  kebele                String?
  houseNumber           String?
  houseTelephoneNumber  String?
  mobileTelephoneNumber String?
  officeTelephoneNumber String?
  specificLocation      String?
  gpsLocation           String?
  homeCountryAddress    String?

  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  dependants     Dependant[]
  spouses        Spouse[]
  vehicles       Vehicle[]
  incidents      Incident[]
  accessRequests AccessRequest[]
  idRequests     EmployeeIdRequest[]
  officers       Officer[]
}

model Dependant {
  id             String               @id @default(cuid())
  employeeId     String
  employee       Employee             @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  firstName      String
  familyName     String
  middleName     String
  auIdNumber     String?
  dateIssued     DateTime?
  validUntil     DateTime?
  dateOfBirth    DateTime?
  relationshipId String
  relationship   Relationship         @relation(fields: [relationshipId], references: [id])
  nameOfSchool   String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  idRequests     DependantIdRequest[]
}

model Spouse {
  id               String            @id @default(cuid())
  employeeId       String
  employee         Employee          @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  firstName        String
  familyName       String
  middleName       String
  auIdNumber       String?
  dateIssued       DateTime?
  validUntil       DateTime?
  telephoneNumber  String?
  dateOfBirth      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  spouseIdRequests SpouseIdRequest[]
}

model Vehicle {
  id              String                   @id @default(cuid())
  employeeId      String
  employee        Employee                 @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  make            String
  model           String
  year            String
  color           String
  plateNumber     String
  capacity        String
  ownership       String
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  carPassRequests EmployeeCarPassRequest[]
}

model Officer {
  id                  String               @id @default(cuid())
  type                OfficerType
  employeeId          String
  employee            Employee             @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt           DateTime             @default(now())
  isActive            Boolean              @default(true)
  updatedAt           DateTime             @updatedAt
  incidentAssignments IncidentAssignment[]
  incidentAssessments IncidentAssessment[]

  @@unique([type, employeeId])
}

model Incident {
  id             String               @id @default(cuid())
  employeeId     String
  employee       Employee             @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  incidentNumber String               @default("")
  incidentTypeId String
  incidentType   IncidentType         @relation(fields: [incidentTypeId], references: [id])
  location       String               @default("")
  description    String               @default("")
  eyeWitnesses   String               @default("")
  occuredWhile   String               @default("")
  occuredAt      DateTime             @default(now())
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  assessment     IncidentAssessment?
  attachments    Attachment[]
  assignments    IncidentAssignment[]
}

model Attachment {
  id               String          @id @default(cuid())
  altText          String?
  type             String
  contentType      String
  fileName         String
  extension        String
  incidentId       String?
  incident         Incident?       @relation(fields: [incidentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  idRequestId      String?
  idRequest        IdRequest?      @relation(fields: [idRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  carPassRequestId String?
  carPassRequest   CarPassRequest? @relation(fields: [carPassRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([incidentId])
  @@index([idRequestId])
  @@index([carPassRequestId])
}

model IncidentAssignment {
  id         String   @id @default(cuid())
  incidentId String
  incident   Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  officerId  String
  officer    Officer  @relation(fields: [officerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  remarks    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model IncidentAssessment {
  id                String   @id @default(cuid())
  incidentId        String   @unique
  incident          Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cause             String
  actionTaken       String
  severity          String
  impactType        String
  likelihood        String
  training          String
  changeOfProcedure String
  physicalMeasures  String
  status            String
  officerId         String
  officer           Officer  @relation(fields: [officerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model AccessRequest {
  id            String    @id @default(cuid())
  requestorId   String
  requestor     Employee  @relation(fields: [requestorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requestNumber String    @default("")
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  visitors      Visitor[]
}

model Counter {
  id          String      @id @default(cuid())
  type        CounterType @unique
  lastCounter Int         @default(0)
}

model Visitor {
  id              String        @id @default(cuid())
  accessRequestId String
  accessRequest   AccessRequest @relation(fields: [accessRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  firstName       String        @default("")
  familyName      String        @default("")
  telephone       String        @default("")
  organization    String        @default("")
  whomToVisit     String        @default("")
  destination     String        @default("")
  carPlateNumber  String        @default("")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  logs            VisitorLog[]
}

model VisitorLog {
  id          String    @id @default(cuid())
  visitorId   String
  visitor     Visitor   @relation(fields: [visitorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  checkIn     DateTime  @default(now())
  checkOut    DateTime?
  badgeNumber String
  remarks     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([providerName, providerId])
  @@index([userId])
}

model Verification {
  id        String    @id @default(cuid())
  type      String
  target    String
  secret    String
  algorithm String
  digits    Int
  period    Int
  charSet   String
  expiresAt DateTime?
  createdAt DateTime  @default(now())

  @@unique([target, type])
}

model IdRequest {
  id                       String                    @id @default(cuid())
  requestNumber            String
  type                     IdRequestType             @default(EMPLOYEE)
  status                   IdRequestStatus           @default(PENDING)
  reason                   IdRequestReason           @default(NEW)
  requestorEmail           String
  attachments              Attachment[]
  employeeIdRequest        EmployeeIdRequest?
  dependantIdRequest       DependantIdRequest?
  spouseIdRequest          SpouseIdRequest?
  embassyStaffIdRequest    EmbassyStaffIdRequest?
  partnerIdRequest         PartnerIdRequest?
  serviceProviderIdRequest ServiceProviderIdRequest?
  privateDriverIdRequest   PrivateDriverIdRequest?
  libraryUserIdRequest     LibraryUserIdRequest?
  retireeIdRequest         RetireeIdRequest?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
}

model EmployeeIdRequest {
  id                 String    @id @default(cuid())
  employeeId         String
  employee           Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  idRequestId        String    @unique
  idRequest          IdRequest @relation(fields: [idRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contractExpiryDate DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model DependantIdRequest {
  id          String    @id @default(cuid())
  dependantId String
  dependant   Dependant @relation(fields: [dependantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  idRequestId String    @unique
  idRequest   IdRequest @relation(fields: [idRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SpouseIdRequest {
  id          String    @id @default(cuid())
  spouseId    String
  spouse      Spouse    @relation(fields: [spouseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  idRequestId String    @unique
  idRequest   IdRequest @relation(fields: [idRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model EmbassyStaffIdRequest {
  id          String    @id @default(cuid())
  idRequestId String    @unique
  idRequest   IdRequest @relation(fields: [idRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fullName    String
  idNumber    String
  embassy     String
  title       String
  gender      String
  nationality String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PartnerIdRequest {
  id                 String    @id @default(cuid())
  idRequestId        String    @unique
  idRequest          IdRequest @relation(fields: [idRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fullName           String
  idNumber           String
  contractExpireDate DateTime
  title              String
  gender             String
  nationality        String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model ServiceProviderIdRequest {
  id                  String    @id @default(cuid())
  idRequestId         String    @unique
  idRequest           IdRequest @relation(fields: [idRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fullName            String
  idNumber            String
  title               String
  phoneNumber         String
  serviceProviderName String
  gender              String
  nationality         String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model PrivateDriverIdRequest {
  id                String    @id @default(cuid())
  idRequestId       String    @unique
  idRequest         IdRequest @relation(fields: [idRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  staffAuIdNumber   String
  driverFullName    String
  driverIdNumber    String
  title             String
  driverPhoneNumber String
  gender            String
  nationality       String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model LibraryUserIdRequest {
  id          String    @id @default(cuid())
  idRequestId String    @unique
  idRequest   IdRequest @relation(fields: [idRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fullName    String
  idNumber    String
  title       String
  phoneNumber String
  requestedBy String
  gender      String
  nationality String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model RetireeIdRequest {
  id          String    @id @default(cuid())
  idRequestId String    @unique
  idRequest   IdRequest @relation(fields: [idRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fullName    String
  idNumber    String
  title       String
  phoneNumber String
  gender      String
  nationality String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CarPassRequest {
  id                     String                  @id @default(cuid())
  requestNumber          String
  type                   CarPassRequestType      @default(EMPLOYEE)
  status                 CarPassRequestStatus    @default(PENDING)
  reason                 CarPassRequestReason    @default(NEW)
  requestorEmail         String
  attachments            Attachment[]
  employeeCarPassRequest EmployeeCarPassRequest?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
}

model EmployeeCarPassRequest {
  id               String         @id @default(cuid())
  vehicleId        String
  vehicle          Vehicle        @relation(fields: [vehicleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  carPassRequestId String         @unique
  carPassRequest   CarPassRequest @relation(fields: [carPassRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}
