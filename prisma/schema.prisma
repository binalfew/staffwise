generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  username    String       @unique
  name        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  password    Password?
  roles       Role[]
  connections Connection[]
}

model Permission {
  id          String   @id @default(cuid())
  action      String // create, read, update, delete
  entity      String // user, organ, department
  access      String // own, any
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[]
  users       User[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Country {
  id            String     @id @default(cuid())
  name          String
  code          String
  isMemberState Boolean
  isDeleted     Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  organs        Organ[]
  employees     Employee[]
}

model Organ {
  id          String       @id @default(cuid())
  name        String
  code        String
  address     String
  countryId   String
  country     Country      @relation(fields: [countryId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
  locations   Location[]
  employees   Employee[]
}

model Department {
  id        String     @id @default(cuid())
  name      String
  code      String
  organId   String
  organ     Organ      @relation(fields: [organId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employees Employee[]
}

model Location {
  id        String     @id @default(cuid())
  name      String
  code      String
  organId   String
  organ     Organ      @relation(fields: [organId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  floors    Floor[]
  employees Employee[]
}

model Floor {
  id         String     @id @default(cuid())
  name       String
  code       String
  locationId String
  location   Location   @relation(fields: [locationId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  employees  Employee[]
}

model Relationship {
  id         String      @id @default(cuid())
  name       String
  code       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  dependants Dependant[]
}

model IncidentType {
  id        String     @id @default(cuid())
  name      String
  code      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  incidents Incident[]
}

model Employee {
  id                     String     @id @default(cuid())
  firstName              String     @default("")
  familyName             String     @default("")
  middleName             String     @default("")
  email                  String     @default("")
  countryId              String
  country                Country    @relation(fields: [countryId], references: [id])
  nationalPassportNumber String     @unique @default("")
  auPassportNumber       String     @unique @default("")
  auIdNumber             String     @unique @default("")
  dateIssued             DateTime   @default(now())
  validUntil             DateTime   @default(now())
  dateOfBirth            DateTime   @default(now())
  organId                String
  organ                  Organ      @relation(fields: [organId], references: [id])
  departmentId           String
  department             Department @relation(fields: [departmentId], references: [id])
  locationId             String
  location               Location   @relation(fields: [locationId], references: [id])
  floorId                String
  floor                  Floor      @relation(fields: [floorId], references: [id])
  officeNumber           String     @default("")
  specialConditions      String     @default("")
  medicallyTrained       Boolean    @default(false)
  zone                   String     @default("")
  team                   String     @default("")

  city                  String @default("")
  subcity               String @default("")
  woreda                String @default("")
  street                String @default("")
  kebele                String @default("")
  houseNumber           String @default("")
  houseTelephoneNumber  String @default("")
  mobileTelephoneNumber String @default("")
  officeTelephoneNumber String @default("")
  specificLocation      String @default("")
  gpsLocation           String @default("")
  homeCountryAddress    String @default("")

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  dependants     Dependant[]
  spouses        Spouse[]
  vehicles       Vehicle[]
  incidents      Incident[]
  accessRequests AccessRequest[]
}

model Dependant {
  id             String       @id @default(cuid())
  employeeId     String
  employee       Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  firstName      String       @default("")
  familyName     String       @default("")
  middleName     String       @default("")
  auIdNumber     String       @default("")
  dateIssued     DateTime     @default(now())
  validUntil     DateTime     @default(now())
  dateOfBirth    DateTime     @default(now())
  relationshipId String
  relationship   Relationship @relation(fields: [relationshipId], references: [id])
  nameOfSchool   String       @default("")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Spouse {
  id              String   @id @default(cuid())
  employeeId      String
  employee        Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  firstName       String   @default("")
  familyName      String   @default("")
  middleName      String   @default("")
  auIdNumber      String   @default("")
  dateIssued      DateTime @default(now())
  validUntil      DateTime @default(now())
  telephoneNumber String   @default("")
  dateOfBirth     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Vehicle {
  id          String   @id @default(cuid())
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  make        String   @default("")
  model       String   @default("")
  year        String   @default("")
  color       String   @default("")
  plateNumber String   @default("")
  capacity    String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Incident {
  id             String       @id @default(cuid())
  employeeId     String
  employee       Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  incidentNumber String       @default("")
  incidentTypeId String
  incidentType   IncidentType @relation(fields: [incidentTypeId], references: [id])
  location       String       @default("")
  description    String       @default("")
  eyeWitnesses   String       @default("")
  occuredWhile   String       @default("")
  occuredAt      DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  assessment     Assessment?
}

model Assessment {
  id                String   @id @default(cuid())
  incidentId        String   @unique
  incident          Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cause             String   @default("")
  actionTaken       String   @default("")
  severity          String   @default("")
  impactType        String   @default("")
  likelihood        String   @default("")
  training          String   @default("")
  changeOfProcedure String   @default("")
  physicalMeasures  String   @default("")
  status            String   @default("")
  officer           String   @default("")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model AccessRequest {
  id            String    @id @default(cuid())
  requestorId   String
  requestor     Employee  @relation(fields: [requestorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  requestNumber String    @default("")
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  visitors      Visitor[]
}

model AccessRequestCounter {
  id          String @id @default(cuid())
  lastCounter Int    @default(0)
}

model Visitor {
  id              String        @id @default(cuid())
  accessRequestId String
  accessRequest   AccessRequest @relation(fields: [accessRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  firstName       String        @default("")
  familyName      String        @default("")
  telephone       String        @default("")
  organization    String        @default("")
  whomToVisit     String        @default("")
  destination     String        @default("")
  carPlateNumber  String        @default("")
  timeIn          DateTime      @default(now())
  timeOut         DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([providerName, providerId])
  @@index([userId])
}

model Verification {
  id        String    @id @default(cuid())
  type      String
  target    String
  secret    String
  algorithm String
  digits    Int
  period    Int
  charSet   String
  expiresAt DateTime?
  createdAt DateTime  @default(now())

  @@unique([target, type])
}
